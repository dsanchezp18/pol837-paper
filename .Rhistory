ecu_ab_raw %>%
mutate(cluster = zap_missing(cluster)) %>%
filter(!is.na(cluster))  %>%
group_by(year)  %>%
summarise(n = n())  %>%
ungroup()
# Look at year 2004 ----------------------------------------------------
# Look at the canton variables for 2004
ecu_ab_raw %>%
filter(year == 2004) %>%
select(canton, municipio, municipio04, municipio06, municipio08, municipio10, municipio1t) %>%
glimpse()
# Count missing values for each variable
ecu_ab_raw %>%
filter(year == 2004) %>%
summarise(missing_canton = sum(is.na(canton)),
missing_municipio = sum(is.na(municipio)),
missing_municipio04 = sum(is.na(municipio04)),
missing_municipio06 = sum(is.na(municipio06)),
missing_municipio08 = sum(is.na(municipio08)),
missing_municipio10 = sum(is.na(municipio10)),
missing_municipio1t = sum(is.na(municipio1t)))
# Look at the unique values for each variable
ecu_2004_cases <-
ecu_ab_raw %>%
filter(year == 2004) %>%
transmute(canton =  as_factor(canton)) %>%
distinct(.keep_all = T) %>%
mutate(canton_name = as_factor(canton))
ecu_2004_cases %>% View()
load(/data/full_df.RData)
#| label: empirical-strategy-setup
# Load the data
load("/data/full_df.RData")
#| label: empirical-strategy-setup
# Load the data
load("data/full_df.RData")
# Define modelsummary arguments for tables
stars <- c("*" = 0.1,
"**" = 0.05,
"***" = 0.05)
# Do the goodness of fit mapping as a list mapping
gf_map <- list(
list("raw" = "nobs", "clean" = "N", "fmt" = 0),
list("raw" = "aic", "clean" = "AIC", "fmt" = 0),
list("raw" = "rmse", "clean" = "RMSE", "fmt" = 3),
list("raw" = "FE: canton_dpa", "clean" = "Canton fixed effects", "fmt" = 0),
list("raw" = "FE: interview_date", "clean" = "Interview date fixed effects", "fmt" = 0)
)
#| label: descriptive-stats
#| output: asis
# Prepare relevant variables for all years
df_descriptive <-
df %>%
transmute(`Presidential approval` = approves_president,
`Daily minimum temperature (C)` = min_temperature,
`Daily maximum temperature (C)` = max_temperature,
`Daily average temperature (C)` = avg_temperature,
`Daily precipitation (mm)` = precipitation,
`Female` = sex,
`Age (years)` = age,
`Rural status` = urban_rural,
`Education` = education,
`Labour market status` = labour_market,
`Worse perception of personal economy` = personal_econ_situation,
`Worse perception of country economy` = country_econ_situation,
`Ideology score (0-10)` = ideology,
`Support of democracy` = democracy_support,
`Perception of corruption` = corruption_perception,
`Tolerance to bribes` = corruption_tolerance,
`Political pride score` = political_pride,
`Trust in police score (0-7)` = confidence_police,
`Trust in local government score (0-7)` = confidence_local_gov,
)
library(dplyr)
library(modelsummary)
#| label: descriptive-stats
#| output: asis
# Prepare relevant variables for all years
df_descriptive <-
df %>%
transmute(`Presidential approval` = approves_president,
`Daily minimum temperature (C)` = min_temperature,
`Daily maximum temperature (C)` = max_temperature,
`Daily average temperature (C)` = avg_temperature,
`Daily precipitation (mm)` = precipitation,
`Female` = sex,
`Age (years)` = age,
`Rural status` = urban_rural,
`Education` = education,
`Labour market status` = labour_market,
`Worse perception of personal economy` = personal_econ_situation,
`Worse perception of country economy` = country_econ_situation,
`Ideology score (0-10)` = ideology,
`Support of democracy` = democracy_support,
`Perception of corruption` = corruption_perception,
`Tolerance to bribes` = corruption_tolerance,
`Political pride score` = political_pride,
`Trust in police score (0-7)` = confidence_police,
`Trust in local government score (0-7)` = confidence_local_gov,
)
# Notes
notes_descriptive <- list(
"Note: Descriptive statistics for variables used in the empirical analysis. For categorical variables, the percent of observations in the category out of the total sample is presented. For numerical (either ordinal or continuous) variables, the mean, standard deviation, minimum and maximum are presented. For both, the number of observations and the percentage of missing values."
)
# Use datasummary() to create the table
datasummary((Education + Female + `Labour market status` + `Worse perception of personal economy` + `Worse perception of country economy` + `Perception of corruption` + `Tolerance to bribes` + All(df_descriptive)) ~ ((N) + Percent() + (`Missing (%)` = PercentMissing) + Mean + (`Std. dev.` = SD) + Min + Median + Max + Percent()),
data = df_descriptive,
fmt = 2,
output = 'latex',
booktabs = TRUE,
threeparttable = TRUE,
title = 'Descriptive statistics',
notes = notes_descriptive) %>%
kable_styling(latex_options = c("hold_position"), font_size = 8)
library(dplyr)
library(modelsummary)
library(kableExtra)
#| label: empirical-strategy-setup
# Libraries
library(dplyr)
library(modelsummary)
library(kableExtra)
# Load the data
load("data/full_df.RData")
# Define modelsummary arguments for tables
stars <- c("*" = 0.1,
"**" = 0.05,
"***" = 0.05)
# Do the goodness of fit mapping as a list mapping
gf_map <- list(
list("raw" = "nobs", "clean" = "N", "fmt" = 0),
list("raw" = "aic", "clean" = "AIC", "fmt" = 0),
list("raw" = "rmse", "clean" = "RMSE", "fmt" = 3),
list("raw" = "FE: canton_dpa", "clean" = "Canton fixed effects", "fmt" = 0),
list("raw" = "FE: interview_date", "clean" = "Interview date fixed effects", "fmt" = 0)
)
#| label: descriptive-stats
#| output: asis
# Prepare relevant variables for all years
df_descriptive <-
df %>%
transmute(`Presidential approval` = approves_president,
`Daily minimum temperature (C)` = min_temperature,
`Daily maximum temperature (C)` = max_temperature,
`Daily average temperature (C)` = avg_temperature,
`Daily precipitation (mm)` = precipitation,
`Female` = sex,
`Age (years)` = age,
`Rural status` = urban_rural,
`Education` = education,
`Labour market status` = labour_market,
`Worse perception of personal economy` = personal_econ_situation,
`Worse perception of country economy` = country_econ_situation,
`Ideology score (0-10)` = ideology,
`Support of democracy` = democracy_support,
`Perception of corruption` = corruption_perception,
`Tolerance to bribes` = corruption_tolerance,
`Political pride score` = political_pride,
`Trust in police score (0-7)` = confidence_police,
`Trust in local government score (0-7)` = confidence_local_gov,
)
# Notes
notes_descriptive <- list(
"Note: Descriptive statistics for variables used in the empirical analysis. For categorical variables, the percent of observations in the category out of the total sample is presented. For numerical (either ordinal or continuous) variables, the mean, standard deviation, minimum and maximum are presented. For both, the number of observations and the percentage of missing values."
)
# Use datasummary() to create the table
datasummary((Education + Female + `Labour market status` + `Worse perception of personal economy` + `Worse perception of country economy` + `Perception of corruption` + `Tolerance to bribes` + All(df_descriptive)) ~ ((N) + Percent() + (`Missing (%)` = PercentMissing) + Mean + (`Std. dev.` = SD) + Min + Median + Max + Percent()),
data = df_descriptive,
fmt = 2,
output = 'latex',
booktabs = TRUE,
threeparttable = TRUE,
title = 'Descriptive statistics',
notes = notes_descriptive) %>%
kable_styling(latex_options = c("hold_position"), font_size = 8)
datasummary((Education + Female + `Labour market status` + `Worse perception of personal economy` + `Worse perception of country economy` + `Perception of corruption` + `Tolerance to bribes` + All(df_descriptive)) ~ ((N) + Percent() + (`Missing (%)` = PercentMissing) + Mean + (`Std. dev.` = SD) + Min + Median + Max + Percent()),
data = df_descriptive,
fmt = 2,
output = "markdown",
booktabs = TRUE)
#| label: descriptive-stats
#| output: asis
#| tbl-cap: Descriptive statistics for the matched AB data and weather variables
#| tbl-cap-location: top
datasummary((Education + Female + `Labour market status` + `Worse perception of personal economy` + `Worse perception of country economy` + `Perception of corruption` + `Tolerance to bribes` + All(df_descriptive)) ~ ((N) + Percent() + (`Missing (%)` = PercentMissing) + Mean + (`Std. dev.` = SD) + Min + Median + Max + Percent()),
data = df_descriptive,
fmt = 2,
output = "markdown",
booktabs = TRUE)
?datasummary()
#| label: results-setup
#| include: false
# Source the models
source("/scripts/r/empirical_analysis.R")
#| label: results-setup
#| include: false
# Source the models
source("scripts/r/empirical_analysis.R")
#| label: results-setup
#| include: false
# Source the models
source("scripts/r/empirical_analysis.R")
source("scripts/r/empirical_analysis.R")
#| label: results-baseline-models
#| output: asis
# Define the coefficient names
coefficients_baseline_models <- c(
"min_temperature" = "Min. temperature (\u00B0C)",
"max_temperature" = "Max. temperature (\u00B0C)",
"avg_temperature" = "Avg. temperature (\u00B0C)",
"precipitation" = "Precipitation (mm)"
)
# Add notes as a list
notes_baseline_models <- list(
"Note: Baseline models explaining presidential approval through daily weather variables and canton and interview date fixed effects. Standard errors shown in parentheses are clustered by canton.",
"***p<0.01, **p<0.05, *p<0.1."
)
# Use modelsummary to create the table
modelsummary(simple_models,
coef_map = coefficients_baseline_models,
stars = stars,
output = "latex",
estimate = "{estimate}{stars}",
booktabs = TRUE,
align = "lrrrr",
threeparttable = TRUE,
title = "Logit coefficients for baseline specifications",
vcov = ~ canton_dpa,
notes = notes_baseline_models,
gof_map = gf_map) %>%
kable_styling(latex_options = "hold_position")
#| label: partial-effects-plot
#| fig-cap: "Marginal Effects of Max. Temperature on Presidential Approval"
plot_slopes(simple_model4,
variables = "max_temperature",
condition = "max_temperature") +
theme_minimal() +
labs(x = "Max. Temperature (\u00B0C)",
y = "Marginal Probability of Presidential Approval") +
scale_y_continuous(labels = scales::percent_format()) +
theme(panel.grid.major = element_line(linetype = "dashed", linewidth = 0.3),
panel.grid.minor = element_line(linetype = "dashed", linewidth = 0.3),
axis.text.x = element_text(color = "black"),
text = element_text(family = 'serif', color = "black"),
plot.background = element_rect(fill = "white", colour = "white"),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 1, linetype = "solid"),
plot.caption = element_text(hjust = 0))
library(marginaleffects)
#| label: results-setup
#| include: false
# Source the models
source("scripts/r/empirical_analysis.R")
# Define modelsummary arguments for tables
stars <- c("*" = 0.1,
"**" = 0.05,
"***" = 0.05)
# Do the goodness of fit mapping as a list mapping
gf_map <- list(
list("raw" = "nobs", "clean" = "N", "fmt" = 0),
list("raw" = "aic", "clean" = "AIC", "fmt" = 0),
list("raw" = "rmse", "clean" = "RMSE", "fmt" = 3),
list("raw" = "FE: canton_dpa", "clean" = "Canton fixed effects", "fmt" = 0),
list("raw" = "FE: interview_date", "clean" = "Interview date fixed effects", "fmt" = 0)
)
#| label: results-baseline-models
#| output: asis
# Define the coefficient names
coefficients_baseline_models <- c(
"min_temperature" = "Min. temperature (\u00B0C)",
"max_temperature" = "Max. temperature (\u00B0C)",
"avg_temperature" = "Avg. temperature (\u00B0C)",
"precipitation" = "Precipitation (mm)"
)
# Add notes as a list
notes_baseline_models <- list(
"Note: Baseline models explaining presidential approval through daily weather variables and canton and interview date fixed effects. Standard errors shown in parentheses are clustered by canton.",
"***p<0.01, **p<0.05, *p<0.1."
)
# Use modelsummary to create the table
modelsummary(simple_models,
coef_map = coefficients_baseline_models,
stars = stars,
output = "latex",
estimate = "{estimate}{stars}",
booktabs = TRUE,
align = "lrrrr",
threeparttable = TRUE,
title = "Logit coefficients for baseline specifications",
vcov = ~ canton_dpa,
notes = notes_baseline_models,
gof_map = gf_map) %>%
kable_styling(latex_options = "hold_position")
#| label: partial-effects-plot
#| fig-cap: "Marginal Effects of Max. Temperature on Presidential Approval"
plot_slopes(simple_model4,
variables = "max_temperature",
condition = "max_temperature") +
theme_minimal() +
labs(x = "Max. Temperature (\u00B0C)",
y = "Marginal Probability of Presidential Approval") +
scale_y_continuous(labels = scales::percent_format()) +
theme(panel.grid.major = element_line(linetype = "dashed", linewidth = 0.3),
panel.grid.minor = element_line(linetype = "dashed", linewidth = 0.3),
axis.text.x = element_text(color = "black"),
text = element_text(family = 'serif', color = "black"),
plot.background = element_rect(fill = "white", colour = "white"),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 1, linetype = "solid"),
plot.caption = element_text(hjust = 0))
#| label: results-setup
#| include: false
# Source the models
source("scripts/r/empirical_analysis.R")
# Load other needed libraries
library(marginaleffects)
library(ggplot2)
# Define modelsummary arguments for tables
stars <- c("*" = 0.1,
"**" = 0.05,
"***" = 0.05)
# Do the goodness of fit mapping as a list mapping
gf_map <- list(
list("raw" = "nobs", "clean" = "N", "fmt" = 0),
list("raw" = "aic", "clean" = "AIC", "fmt" = 0),
list("raw" = "rmse", "clean" = "RMSE", "fmt" = 3),
list("raw" = "FE: canton_dpa", "clean" = "Canton fixed effects", "fmt" = 0),
list("raw" = "FE: interview_date", "clean" = "Interview date fixed effects", "fmt" = 0)
)
#| label: results-baseline-models
#| output: asis
# Define the coefficient names
coefficients_baseline_models <- c(
"min_temperature" = "Min. temperature (\u00B0C)",
"max_temperature" = "Max. temperature (\u00B0C)",
"avg_temperature" = "Avg. temperature (\u00B0C)",
"precipitation" = "Precipitation (mm)"
)
# Add notes as a list
notes_baseline_models <- list(
"Note: Baseline models explaining presidential approval through daily weather variables and canton and interview date fixed effects. Standard errors shown in parentheses are clustered by canton.",
"***p<0.01, **p<0.05, *p<0.1."
)
# Use modelsummary to create the table
modelsummary(simple_models,
coef_map = coefficients_baseline_models,
stars = stars,
output = "latex",
estimate = "{estimate}{stars}",
booktabs = TRUE,
align = "lrrrr",
threeparttable = TRUE,
title = "Logit coefficients for baseline specifications",
vcov = ~ canton_dpa,
notes = notes_baseline_models,
gof_map = gf_map) %>%
kable_styling(latex_options = "hold_position")
#| label: partial-effects-plot
#| fig-cap: "Marginal Effects of Max. Temperature on Presidential Approval"
plot_slopes(simple_model4,
variables = "max_temperature",
condition = "max_temperature") +
theme_minimal() +
labs(x = "Max. Temperature (\u00B0C)",
y = "Marginal Probability of Presidential Approval") +
scale_y_continuous(labels = scales::percent_format()) +
theme(panel.grid.major = element_line(linetype = "dashed", linewidth = 0.3),
panel.grid.minor = element_line(linetype = "dashed", linewidth = 0.3),
axis.text.x = element_text(color = "black"),
text = element_text(family = 'serif', color = "black"),
plot.background = element_rect(fill = "white", colour = "white"),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 1, linetype = "solid"),
plot.caption = element_text(hjust = 0))
#| label: results-baseline-models
#| output: asis
# Define the coefficient names
coefficients_baseline_models <- c(
"min_temperature" = "Min. temperature (\u00B0C)",
"max_temperature" = "Max. temperature (\u00B0C)",
"avg_temperature" = "Avg. temperature (\u00B0C)",
"precipitation" = "Precipitation (mm)"
)
# Add notes as a list
notes_baseline_models <- list(
"Note: Baseline models explaining presidential approval through daily weather variables and canton and interview date fixed effects. Standard errors shown in parentheses are clustered by canton.",
"***p<0.01, **p<0.05, *p<0.1."
)
# Use modelsummary to create the table
modelsummary(simple_models,
coef_map = coefficients_baseline_models,
stars = stars,
output = "latex",
estimate = "{estimate}{stars}",
booktabs = TRUE,
align = "lrrrr",
threeparttable = TRUE,
title = "Logit coefficients for baseline specifications",
vcov = ~ canton_dpa,
notes = notes_baseline_models,
gof_map = gf_map) %>%
kable_styling(latex_options = "hold_position")
#| label: results-setup
#| include: false
# Source the models
source("scripts/r/empirical_analysis.R")
# Load other needed libraries
library(marginaleffects)
library(ggplot2)
# Define modelsummary arguments for tables
stars <- c("*" = 0.1,
"**" = 0.05,
"***" = 0.05)
# Do the goodness of fit mapping as a list mapping
gf_map <- list(
list("raw" = "nobs", "clean" = "N", "fmt" = 0),
list("raw" = "aic", "clean" = "AIC", "fmt" = 0),
list("raw" = "rmse", "clean" = "RMSE", "fmt" = 3),
list("raw" = "FE: canton_dpa", "clean" = "Canton fixed effects", "fmt" = 0),
list("raw" = "FE: interview_date", "clean" = "Interview date fixed effects", "fmt" = 0)
)
#| label: heterogeneity-table
#| output: asis
# Define the coefficient names
coef_names_heterogeneity <- c(
"min_temperature" = "Min. temp. (\u00B0C)",
"max_temperature" = "Max. temp. (\u00B0C)",
"region::Costa:min_temperature" = "Coastal \u00D7 Min. temp. (\u00B0C)",
"region::Oriente:min_temperature" = "Amazon \u00D7 Min. temp. (\u00B0C)",
"region::Costa:max_temperature" = "Coastal \u00D7 Max. temp. (\u00B0C)",
"region::Oriente:max_temperature" = "Amazon \u00D7 Max. temp. (\u00B0C)",
"country_econ_situationWorse:min_temperature" = "Worse country econ. \u00D7 Min. temp. (\u00B0C)",
"country_econ_situationWorse:max_temperature" = "Worse country econ. \u00D7 Max. temp. (\u00B0C)",
"personal_econ_situationWorse:min_temperature" = "Worse personal econ. \u00D7 Min. temp. (\u00B0C)",
"personal_econ_situationWorse:max_temperature" = "Worse personal econ. \u00D7 Max. temp. (\u00B0C)",
"ideology:min_temperature" = "Ideology score \u00D7 Min. temp. (\u00B0C)",
"ideology:max_temperature" = "Ideology score \u00D7 Max. temp. (\u00B0C)"
)
# Notes for the table
notes_heterogeneity_models <- list(
"Note: Models allowing for heterogeneous effects of temperature on presidential approval. Regional categories hold the Highlands region as the reference level. Standard errors shown in parentheses are clustered by canton.",
"***p<0.01, **p<0.05, *p<0.1."
)
# Use modelsummary to create the table
modelsummary(models_hetero,
gof_map = gf_map,
coef_map = coef_names_heterogeneity,
stars = stars,
estimate = "{estimate}{stars}",
booktabs = TRUE,
align = "lrrrr",
threeparttable = TRUE,
title = "Logit coefficients for models with interaction terms",
vcov = ~ canton_dpa,
notes = notes_heterogeneity_models,
output = "latex",
threeparttable = TRUE,
longtable = T) %>%
kable_styling(latex_options = c("hold_position", "repeat_header"))
#| label: appendix-setup
# Source models
source("scripts/r/empirical_analysis.R")
# Load other needed libraries
library(dplyr)
library(marginaleffects)
library(ggplot2)
library(kableExtra)
# Define modelsummary arguments for tables
stars <- c("*" = 0.1,
"**" = 0.05,
"***" = 0.05)
# Do the goodness of fit mapping as a list mapping
gf_map <- list(
list("raw" = "nobs", "clean" = "N", "fmt" = 0),
list("raw" = "aic", "clean" = "AIC", "fmt" = 0),
list("raw" = "rmse", "clean" = "RMSE", "fmt" = 3),
list("raw" = "FE: canton_dpa", "clean" = "Canton fixed effects", "fmt" = 0),
list("raw" = "FE: interview_date", "clean" = "Interview date fixed effects", "fmt" = 0)
)
coefficients_baseline_models <- c(
"min_temperature" = "Min. temperature (\u00B0C)",
"max_temperature" = "Max. temperature (\u00B0C)",
"avg_temperature" = "Avg. temperature (\u00B0C)",
"precipitation" = "Precipitation (mm)"
)
#| child: /scripts/r/coefficient_names.R
knitr::read_chunk("/scripts/r/coefficient_names.R")
knitr::read_chunk("scripts/r/coefficient_names.R")
knitr::read_chunk("scripts/r/coefficient_names.R")
#| label: apes-table-1
#| file: /scripts/coefficient_names.R
#| output: asis
# Apply the avg_slopes function to the simple_models list
notes_baseline_models_apes <- list(
"Note: Average partial effects for baseline models explaining presidential approval through daily weather variables and canton and interview date fixed effects. Standard errors shown in parentheses are clustered by canton.",
"***p<0.01, **p<0.05, *p<0.1.")
apes_baseline <- lapply(simple_models, avg_slopes, type = "response")
modelsummary(apes_baseline,
output = "latex",
coef_map = coefficients_baseline_models,
stars = stars,
align = "lrrrr",
estimate = "{estimate}{stars}",
title = "Average partial effects for baseline models in Table 3",
threeparttable = TRUE,
notes = notes_baseline_models_apes,
gof_map = gf_map) %>%
kable_styling(latex_options = c("hold_position"))
library(rbbt)
remotes::install_github("paleolimbot/rbbt")
library(rbbt)
library(rbbt)
remotes::install_github("paleolimbot/rbbt")
remotes::install_github("paleolimbot/rbbt", force = T)
