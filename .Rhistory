x = "Month",
y = "Standard Deviation (C)")  +
coord_polar()
ecuador_monthly_mean_temps_fig <-
ecuador_monthly_mean_temps %>%
ggplot(aes(x = month_year, y = value, color = temperature_type)) +
geom_line() +
labs(x = "",
y = "Temperature (\u00B0C)",
color = "Type of temperature") +
scale_x_date(date_labels = "%b %Y",
date_breaks = "6 months",
expand = c(0,0),
limits = c(as.Date("2008-01-01"), as.Date("2024-07-01"))) +
scale_y_continuous(breaks = seq(12, 28, by = 1),
labels = comma) +
scale_color_manual(values = c("#E60F2D", "#56589e")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, color = "black"),
text = element_text(color = "black", size = 8),
plot.background = element_rect(fill = "white", colour = NA),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 1, linetype = "solid"),
plot.caption = element_text(hjust = 0),
panel.grid.major = element_line(linetype = "dashed", linewidth = 0.3),
panel.grid.minor = element_line(linetype = "dashed", linewidth = 0.3),
strip.background = element_rect(fill = "grey80", colour = "black", linewidth = 1),
legend.position = "bottom"
)
ecuador_monthly_mean_temps_fig
# R Script: Data Visualization
# POL837 Term Research Paper
# Simon Fraser University
# Daniel Sanchez
# Spring 2024
# This script performs data visualization for the POL837 term research paper.
# Preliminaries -----------------------------------------------------------
# Load libraries
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(patchwork)
library(lubridate)
library(scales)
library(haven)
library(survey)
# Load the full dataset
load("data/full_df.RData")
# Load weather data on its own
temperature_min <- read_csv("data/weather/min_temperature.csv")
temperature_max <- read_csv("data/weather/max_temperature.csv")
precipitation <- read_csv("data/weather/precipitation.csv")
cantons_df <- read_csv("data/other/ecuador_cantons.csv")
# Quick data preparation for the weather data --------------------------------
temperature_df <-
temperature_min %>%
rename(min_temperature = value) %>%
left_join(temperature_max %>% select(date, canton_id, max_temperature = value), by = c("date", "canton_id")) %>%
mutate(avg_temp = (min_temperature + max_temperature) / 2) %>%
left_join(cantons_df, by = "canton_id")
precipitation_df <-
precipitation %>%
rename(precipitation = value) %>%
left_join(cantons_df, by = "canton_id")
# Survey responses --------------------------------------------------------
# Plotting survey responses through time with facets
interview_dates_barchart <-
df %>%
filter(!is.na(interview_date),
!(interview_date %>% between(as.Date("2008-07-10"), as.Date("2008-12-12")))) %>%
group_by(interview_date, wave) %>%
summarise(count_of_responses = n()) %>%
ungroup() %>%
mutate(wave = if_else(wave == 2018, 2019, wave)) %>%
ggplot(aes(x = interview_date, y = count_of_responses)) +
geom_col(fill = "forestgreen") +
geom_vline(xintercept = as.Date("2008-01-01"), linetype = "dashed", color = "blue") +
geom_vline(xintercept = as.Date("2009-01-01"), linetype = "dashed", color = "blue") +
geom_vline(xintercept = as.Date("2012-01-01"), linetype = "dashed", color = "blue") +
geom_vline(xintercept = as.Date("2017-01-02"), linetype = "dashed", color = "blue", linewidth = 0.1) +
facet_wrap(~wave, nrow = 2, scales = "free") +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 week") +
labs(x = "Survey Interview Date",
y = "Count of Responses") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 6, color = "black"),
text = element_text(color = "black"),
plot.background = element_rect(fill = "white", colour = NA),
panel.border = element_rect(fill = NA, linewidth = 1, linetype = "solid"),
plot.caption = element_text(hjust = 0),
panel.grid.major.y = element_line(linetype = "dashed", linewidth = 0.3),
panel.grid.minor.y = element_line(linetype = "dashed", linewidth = 0.3),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.background = element_rect(fill = "grey80", linewidth = 1)
)
interview_dates_barchart
ggsave("figures/interview_dates_barchart.png",
interview_dates_barchart,
width = 17,
height = 7,
units = "cm",
dpi = 800)
# Temperature visualization --------------------------------------------------
# Get the overall sd for the temperatures
temperature_sd <-
temperature_df %>%
summarise(sd_avg_temp = sd(avg_temp, na.rm = T),
sd_min_temp = sd(min_temperature, na.rm = T),
sd_max_temp = sd(max_temperature, na.rm = T)) %>%
data.frame()
# Monthly mean temperatures, all country (Polar coordinates)
ecuador_monthly_mean_temps <-
temperature_df %>%
group_by(month = month(date, label = T)) %>%
summarise(avg_temp = mean(avg_temp, na.rm = T),
min_temp = mean(min_temperature, na.rm = T),
max_temp = mean(max_temperature, na.rm = T),
sd_avg_temp = sd(avg_temp, na.rm = T),
sd_min_temp = sd(min_temperature, na.rm = T),
sd_max_temp = sd(max_temperature, na.rm = T)) %>%
pivot_longer(cols = c(avg_temp, min_temp, max_temp, sd_avg_temp, sd_min_temp, sd_max_temp),
names_to = "temperature_type",
values_to = "value") %>%
mutate(base = case_when(
temperature_type == "avg_temp" ~ 19.5,
temperature_type == "min_temp" ~ 12.5,
temperature_type == "max_temp" ~ 23
)) %>%
arrange(temperature_type, month)
ecuador_monthly_mean_temps %>%
filter(temperature_type %in% c("avg_temp", "min_temp", "max_temp")) %>%
ggplot(aes(x = as.factor(month), y = value - base, group = as.factor(month))) +
geom_col() +
#facet_wrap(~temperature_type) +
facet_grid(cols = vars(temperature_type)) +
labs(title = "Monthly Average Temperature for Ecuador",
x = "Month",
y = "Average Temperature (C)")  +
coord_polar()
# Standard deviation of the monthly mean temperatures, all country (Polar coordinates)
ecuador_monthly_mean_temps %>%
filter(temperature_type %in% c("sd_min_temp", "sd_max_temp")) %>%
ggplot(aes(x = as.factor(month), y = value, group = as.factor(month))) +
geom_col() +
facet_wrap(~temperature_type) +
labs(title = "Standard Deviation of Monthly Average Temperature for Ecuador",
x = "Month",
y = "Standard Deviation (C)")  +
coord_polar()
# Do a time series of mean temperatures at the national level
ecuador_monthly_mean_temps <-
temperature_df %>%
mutate(month_year = floor_date(date, "month")) %>%
group_by(month_year) %>%
summarise(`Minimum` = mean(min_temperature, na.rm = T),
`Maximum` = mean(max_temperature, na.rm = T)) %>%
pivot_longer(cols = c(`Minimum`, `Maximum`),
names_to = "temperature_type",
values_to = "value")
ecuador_monthly_mean_temps_fig <-
ecuador_monthly_mean_temps %>%
ggplot(aes(x = month_year, y = value, color = temperature_type)) +
geom_line() +
labs(x = "",
y = "Temperature (\u00B0C)",
color = "Type of temperature") +
scale_x_date(date_labels = "%b %Y",
date_breaks = "6 months",
expand = c(0,0),
limits = c(as.Date("2008-01-01"), as.Date("2024-07-01"))) +
scale_y_continuous(breaks = seq(12, 28, by = 1),
labels = comma) +
scale_color_manual(values = c("#E60F2D", "#56589e")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, color = "black"),
text = element_text(color = "black", size = 8),
plot.background = element_rect(fill = "white", colour = NA),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 1, linetype = "solid"),
plot.caption = element_text(hjust = 0),
panel.grid.major = element_line(linetype = "dashed", linewidth = 0.3),
panel.grid.minor = element_line(linetype = "dashed", linewidth = 0.3),
strip.background = element_rect(fill = "grey80", colour = "black", linewidth = 1),
legend.position = "bottom"
)
ecuador_monthly_mean_temps_fig
ggsave("figures/ecuador_monthly_mean_temps_fig.jpg",
plot = ecuador_monthly_mean_temps_fig,
width = 17,
height = 7,
units = "cm",
dpi = 800)
ecuador_monthly_mean_temps
ecuador_monthly_mean_temps %>% arrange(value)
ecuador_monthly_mean_temps %>% filter(temperature_type = "Minimum")
min_temp <- min(temperature_df$min_temperature, na.rm = T)
min_temp <- min(temperature_df$min_temperature, na.rm = T)
ecuador_monthly_mean_temps %>% filter(temperature_type = "Minimum")
ecuador_monthly_mean_temps %>% filter(temperature_type == "Minimum")
ecuador_monthly_mean_temps %>% filter(temperature_type == "Minimum") %>% arrange(value)
ecuador_monthly_mean_temps %>% filter(temperature_type == "Minimum") %>% arrange(desc(value))
ecuador_monthly_mean_temps %>% filter(temperature_type == "Maximum") %>% arrange(desc(value))
In @fig-temperature I show mean monthly minimum and maximum temperatures from 2008 to 2023. The smallest average minimum temperature was 12.7, compared to the largest maximum temperature of 27.8. There are no notable upward or downward trends through time, with some periods showing higher temperatures. An important feature is that the spread between minimum and maximum temperatures is relatively stable, which will be important for the identification strategy, which I describe below.
#| label: results-setup
#| include: false
# Source the models
source("scripts/r/empirical_analysis.R")
# Load other needed libraries
library(dplyr)
library(marginaleffects)
library(ggplot2)
library(kableExtra)
# Define modelsummary arguments for tables
stars <- c("*" = 0.1,
"**" = 0.05,
"***" = 0.05)
# Do the goodness of fit mapping as a list mapping
gf_map <- list(
list("raw" = "nobs", "clean" = "N", "fmt" = 0),
list("raw" = "aic", "clean" = "AIC", "fmt" = 0),
list("raw" = "rmse", "clean" = "RMSE", "fmt" = 3),
list("raw" = "FE: canton_dpa", "clean" = "Canton fixed effects", "fmt" = 0),
list("raw" = "FE: interview_date", "clean" = "Interview date fixed effects", "fmt" = 0)
)
#| label: results-baseline-models
#| output: asis
# Define the coefficient names
coefficients_baseline_models <- c(
"min_temperature" = "Min. temperature (\u00B0C)",
"max_temperature" = "Max. temperature (\u00B0C)",
"avg_temperature" = "Avg. temperature (\u00B0C)")
# Add notes as a list
notes_baseline_models <- list(
"Note: Baseline models explaining presidential approval through daily weather variables and canton and interview date fixed effects. Standard errors shown in parentheses are clustered by canton.",
"***p<0.01, **p<0.05, *p<0.1."
)
# Use modelsummary to create the table
modelsummary(simple_models,
coef_map = coefficients_baseline_models,
stars = stars,
output = "latex",
estimate = "{estimate}{stars}",
booktabs = TRUE,
align = "lrrrr",
threeparttable = TRUE,
title = "Logit coefficients for baseline specifications",
vcov = ~ canton_dpa,
notes = notes_baseline_models,
gof_map = gf_map) %>%
kable_styling(latex_options = "hold_position")
#| label: results-baseline-models
#| output: asis
# Define the coefficient names
coefficients_baseline_models <- c(
"min_temperature" = "Min. temperature (\u00B0C)",
"max_temperature" = "Max. temperature (\u00B0C)",
"avg_temperature" = "Avg. temperature (\u00B0C)")
# Add notes as a list
notes_baseline_models <- list(
"Note: Baseline models explaining presidential approval through daily weather variables and canton and interview date fixed effects. Standard errors shown in parentheses are clustered by canton.",
"***p<0.01, **p<0.05, *p<0.1."
)
# Use modelsummary to create the table
modelsummary(simple_models,
coef_map = coefficients_baseline_models,
stars = stars,
output = "latex",
estimate = "{estimate}{stars}",
booktabs = TRUE,
align = "lrrrr",
threeparttable = TRUE,
title = "Logit coefficients for baseline specifications",
vcov = ~ canton_dpa,
notes = notes_baseline_models,
gof_map = gf_map) %>%
kable_styling(latex_options = "hold_position")
#| label: partial-effects-plot
#| fig-cap: "Marginal Effects of Max. Temperature on Presidential Approval"
plot_slopes(simple_model4,
variables = "max_temperature",
condition = "max_temperature") +
theme_minimal() +
labs(x = "Max. Temperature (\u00B0C)",
y = "Marginal Probability of Presidential Approval") +
scale_y_continuous(labels = scales::percent_format()) +
theme(panel.grid.major = element_line(linetype = "dashed", linewidth = 0.3),
panel.grid.minor = element_line(linetype = "dashed", linewidth = 0.3),
axis.text.x = element_text(color = "black"),
text = element_text(family = 'serif', color = "black"),
plot.background = element_rect(fill = "white", colour = "white"),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 1, linetype = "solid"),
plot.caption = element_text(hjust = 0))
#| label: results-political-behaviour
#| output: asis
# Coefficient names
coefficients_controls <- c(
"min_temperature" = "Min. temperature (\u00B0C)",
"max_temperature" = "Max. temperature (\u00B0C)",
"avg_temperature" = "Avg. temperature (\u00B0C)",
"precipitation" = "Precipitation (mm)",
"sexFemale" = "Female",
"age" = "Age",
"urban_ruralRural" = "Rural area ",
"educationPrimary" = "Primary education (ref. No education)",
"educationSecondary" = "Secondary education",
"educationSuperior" = "Higher education",
"labour_marketNot in Labour Force" = "Not in Labour Force",
"labour_marketUnemployed" = "Unemployed",
"personal_econ_situationWorse" = "Perceived worse personal economy",
"country_econ_situationWorse" = "Perceived worse country economy",
"ideology" = "Ideology score (0-10)",
"democracy_supportSupports" = "Supports democracy",
"political_pride" = "Political pride score (0-7)",
"corruption_perceptionCorrupt" = "Perceives corruption",
"corruption_toleranceTolerant" = "Tolerates bribes",
"confidence_police" = "Trust in police score (0-7)",
"confidence_local_gov" = "Trust in local gov. (0-7)"
)
# Notes for the table
notes_control_models <- list(
"Note: Models explaining presidential approval through daily weather variables and controls. Standard errors shown in parentheses are clustered by canton.",
"***p<0.01, **p<0.05, *p<0.1."
)
# Use modelsummary to create the table
modelsummary(models_controls,
gof_map = gf_map,
coef_map = coefficients_controls,
stars = stars,
estimate = "{estimate}{stars}",
booktabs = TRUE,
align = "lrrrr",
threeparttable = TRUE,
title = "Logit coefficients for specifications with controls",
vcov = ~ canton_dpa,
notes = notes_control_models,
output = "latex",
threeparttable = TRUE,
longtable = T) %>%
kable_styling(latex_options = c("hold_position", "repeat_header"))
#| label: partial-effects-plot-controls
#| fig-cap: "Marginal Effects of Max. Temperature on Presidential Approval with Controls"
#| fig-cap-location: top
#| fig-width: 6.7
#| fig-height: 4
plot_slopes(model4_controls, variables = "max_temperature", condition = "max_temperature") +
theme_minimal() +
labs(x = "Max. Temperature (\u00B0C)",
y = "Marginal Probability of Presidential Approval") +
scale_y_continuous(labels = scales::percent_format()) +
theme(panel.grid.major = element_line(linetype = "dashed", linewidth = 0.3),
panel.grid.minor = element_line(linetype = "dashed", linewidth = 0.3),
axis.text.x = element_text(color = "black"),
text = element_text(family = 'serif', color = "black"),
plot.background = element_rect(fill = "white", colour = "white"),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 1, linetype = "solid"),
plot.caption = element_text(hjust = 0))
#| label: heterogeneity-table
#| output: asis
# Define the coefficient names
coef_names_heterogeneity <- c(
"min_temperature" = "Min. temp. (\u00B0C)",
"max_temperature" = "Max. temp. (\u00B0C)",
"region::Costa:min_temperature" = "Coastal \u00D7 Min. temp. (\u00B0C)",
"region::Oriente:min_temperature" = "Amazon \u00D7 Min. temp. (\u00B0C)",
"region::Costa:max_temperature" = "Coastal \u00D7 Max. temp. (\u00B0C)",
"region::Oriente:max_temperature" = "Amazon \u00D7 Max. temp. (\u00B0C)",
"country_econ_situationWorse:min_temperature" = "Worse country econ. \u00D7 Min. temp. (\u00B0C)",
"country_econ_situationWorse:max_temperature" = "Worse country econ. \u00D7 Max. temp. (\u00B0C)",
"personal_econ_situationWorse:min_temperature" = "Worse personal econ. \u00D7 Min. temp. (\u00B0C)",
"personal_econ_situationWorse:max_temperature" = "Worse personal econ. \u00D7 Max. temp. (\u00B0C)",
"ideology:min_temperature" = "Ideology score \u00D7 Min. temp. (\u00B0C)",
"ideology:max_temperature" = "Ideology score \u00D7 Max. temp. (\u00B0C)"
)
# Notes for the table
notes_heterogeneity_models <- list(
"Note: Models allowing for heterogeneous effects of temperature on presidential approval. Regional categories hold the Highlands region as the reference level. Standard errors shown in parentheses are clustered by canton.",
"***p<0.01, **p<0.05, *p<0.1."
)
# Use modelsummary to create the table
modelsummary(models_hetero,
gof_map = gf_map,
coef_map = coef_names_heterogeneity,
stars = stars,
estimate = "{estimate}{stars}",
booktabs = TRUE,
align = "lrrrr",
threeparttable = TRUE,
title = "Logit coefficients for models with interaction terms",
vcov = ~ canton_dpa,
notes = notes_heterogeneity_models,
output = "latex",
threeparttable = TRUE,
longtable = T) %>%
kable_styling(latex_options = c("hold_position", "repeat_header"))
#| label: partial-effects-plot-controls
#| fig-cap: "Marginal Effects of Max. Temperature on Presidential Approval with Controls"
#| fig-cap-location: top
#| fig-width: 6.7
#| fig-height: 4
plot_slopes(model4_controls, variables = "max_temperature", condition = "max_temperature") +
theme_minimal() +
labs(x = "Max. Temperature (\u00B0C)",
y = "Marginal Probability of Presidential Approval") +
scale_y_continuous(labels = scales::percent_format()) +
theme(panel.grid.major = element_line(linetype = "dashed", linewidth = 0.3),
panel.grid.minor = element_line(linetype = "dashed", linewidth = 0.3),
axis.text.x = element_text(color = "black"),
text = element_text(family = 'serif', color = "black"),
plot.background = element_rect(fill = "white", colour = "white"),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 1, linetype = "solid"),
plot.caption = element_text(hjust = 0))
modelsummary(hetero_models,
gof_map = gf_map,
coef_map = coef_names_heterogeneity,
stars = stars,
estimate = "{estimate}{stars}",
booktabs = TRUE,
align = "lrrrr",
threeparttable = TRUE,
title = "Logit coefficients for models with interaction terms",
vcov = ~ canton_dpa,
notes = notes_heterogeneity_models,
output = "latex",
threeparttable = TRUE,
longtable = T) %>%
kable_styling(latex_options = c("hold_position", "repeat_header"))
#| label: heterogeneity-table
#| output: asis
#| eval: false
# Define the coefficient names
coef_names_heterogeneity <- c(
"min_temperature" = "Min. temp. (\u00B0C)",
"max_temperature" = "Max. temp. (\u00B0C)",
"region::Costa:min_temperature" = "Coastal \u00D7 Min. temp. (\u00B0C)",
"region::Oriente:min_temperature" = "Amazon \u00D7 Min. temp. (\u00B0C)",
"region::Costa:max_temperature" = "Coastal \u00D7 Max. temp. (\u00B0C)",
"region::Oriente:max_temperature" = "Amazon \u00D7 Max. temp. (\u00B0C)",
"country_econ_situationWorse:min_temperature" = "Worse country econ. \u00D7 Min. temp. (\u00B0C)",
"country_econ_situationWorse:max_temperature" = "Worse country econ. \u00D7 Max. temp. (\u00B0C)",
"personal_econ_situationWorse:min_temperature" = "Worse personal econ. \u00D7 Min. temp. (\u00B0C)",
"personal_econ_situationWorse:max_temperature" = "Worse personal econ. \u00D7 Max. temp. (\u00B0C)",
"ideology:min_temperature" = "Ideology score \u00D7 Min. temp. (\u00B0C)",
"ideology:max_temperature" = "Ideology score \u00D7 Max. temp. (\u00B0C)"
)
# Notes for the table
notes_heterogeneity_models <- list(
"Note: Models allowing for heterogeneous effects of temperature on presidential approval. Regional categories hold the Highlands region as the reference level. Standard errors shown in parentheses are clustered by canton.",
"***p<0.01, **p<0.05, *p<0.1."
)
# Use modelsummary to create the table
modelsummary(hetero_models,
gof_map = gf_map,
coef_map = coef_names_heterogeneity,
stars = stars,
estimate = "{estimate}{stars}",
booktabs = TRUE,
align = "lrrrr",
threeparttable = TRUE,
title = "Logit coefficients for models with interaction terms",
vcov = ~ canton_dpa,
notes = notes_heterogeneity_models,
output = "latex",
threeparttable = TRUE,
longtable = T) %>%
kable_styling(latex_options = c("hold_position", "repeat_header"))
#| label: results-political-behaviour
#| output: asis
# Coefficient names
coefficients_controls <- c(
"min_temperature" = "Min. temperature (\u00B0C)",
"max_temperature" = "Max. temperature (\u00B0C)",
"avg_temperature" = "Avg. temperature (\u00B0C)",
"precipitation" = "Precipitation (mm)",
"sexFemale" = "Female",
"age" = "Age",
"urban_ruralRural" = "Rural area ",
"educationPrimary" = "Primary education (ref. No education)",
"educationSecondary" = "Secondary education",
"educationSuperior" = "Higher education",
"labour_marketNot in Labour Force" = "Not in Labour Force",
"labour_marketUnemployed" = "Unemployed",
"personal_econ_situationWorse" = "Perceived worse personal economy",
"country_econ_situationWorse" = "Perceived worse country economy",
"ideology" = "Ideology score (0-10)",
"democracy_supportSupports" = "Supports democracy",
"political_pride" = "Political pride score (0-7)",
"corruption_perceptionCorrupt" = "Perceives corruption",
"corruption_toleranceTolerant" = "Tolerates bribes",
"confidence_police" = "Trust in police score (0-7)",
"confidence_local_gov" = "Trust in local gov. (0-7)"
)
# Notes for the table
notes_control_models <- list(
"Note: Models explaining presidential approval through daily weather variables and controls. Standard errors shown in parentheses are clustered by canton.",
"***p<0.01, **p<0.05, *p<0.1."
)
# Use modelsummary to create the table
modelsummary(models_controls,
gof_map = gf_map,
coef_map = coefficients_controls,
stars = stars,
estimate = "{estimate}{stars}",
booktabs = TRUE,
align = "lrrrr",
threeparttable = TRUE,
title = "Logit coefficients for specifications with controls",
vcov = ~ canton_dpa,
notes = notes_control_models,
output = "latex",
threeparttable = TRUE,
longtable = T) %>%
kable_styling(latex_options = c("hold_position", "repeat_header"))
