)
#| label: results-baseline-models
#| output: asis
# Define the coefficient names
coefficients_baseline_models <- c(
"min_temperature" = "Min. temperature (\u00B0C)",
"max_temperature" = "Max. temperature (\u00B0C)",
"avg_temperature" = "Avg. temperature (\u00B0C)",
"precipitation" = "Precipitation (mm)"
)
# Add notes as a list
notes_baseline_models <- list(
"Note: Baseline models explaining presidential approval through daily weather variables and canton and interview date fixed effects. Standard errors shown in parentheses are clustered by canton.",
"***p<0.01, **p<0.05, *p<0.1."
)
# Use modelsummary to create the table
modelsummary(simple_models,
coef_map = coefficients_baseline_models,
stars = stars,
output = "latex",
estimate = "{estimate}{stars}",
booktabs = TRUE,
align = "lrrrr",
threeparttable = TRUE,
title = "Logit coefficients for baseline specifications",
vcov = ~ canton_dpa,
notes = notes_baseline_models,
gof_map = gf_map) %>%
kable_styling(latex_options = "hold_position")
#| label: partial-effects-plot
#| fig-cap: "Marginal Effects of Max. Temperature on Presidential Approval"
plot_slopes(simple_model4,
variables = "max_temperature",
condition = "max_temperature") +
theme_minimal() +
labs(x = "Max. Temperature (\u00B0C)",
y = "Marginal Probability of Presidential Approval") +
scale_y_continuous(labels = scales::percent_format()) +
theme(panel.grid.major = element_line(linetype = "dashed", linewidth = 0.3),
panel.grid.minor = element_line(linetype = "dashed", linewidth = 0.3),
axis.text.x = element_text(color = "black"),
text = element_text(family = 'serif', color = "black"),
plot.background = element_rect(fill = "white", colour = "white"),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 1, linetype = "solid"),
plot.caption = element_text(hjust = 0))
#| label: results-setup
#| include: false
# Source the models
source("scripts/r/empirical_analysis.R")
# Load other needed libraries
library(marginaleffects)
library(ggplot2)
# Define modelsummary arguments for tables
stars <- c("*" = 0.1,
"**" = 0.05,
"***" = 0.05)
# Do the goodness of fit mapping as a list mapping
gf_map <- list(
list("raw" = "nobs", "clean" = "N", "fmt" = 0),
list("raw" = "aic", "clean" = "AIC", "fmt" = 0),
list("raw" = "rmse", "clean" = "RMSE", "fmt" = 3),
list("raw" = "FE: canton_dpa", "clean" = "Canton fixed effects", "fmt" = 0),
list("raw" = "FE: interview_date", "clean" = "Interview date fixed effects", "fmt" = 0)
)
#| label: results-baseline-models
#| output: asis
# Define the coefficient names
coefficients_baseline_models <- c(
"min_temperature" = "Min. temperature (\u00B0C)",
"max_temperature" = "Max. temperature (\u00B0C)",
"avg_temperature" = "Avg. temperature (\u00B0C)",
"precipitation" = "Precipitation (mm)"
)
# Add notes as a list
notes_baseline_models <- list(
"Note: Baseline models explaining presidential approval through daily weather variables and canton and interview date fixed effects. Standard errors shown in parentheses are clustered by canton.",
"***p<0.01, **p<0.05, *p<0.1."
)
# Use modelsummary to create the table
modelsummary(simple_models,
coef_map = coefficients_baseline_models,
stars = stars,
output = "latex",
estimate = "{estimate}{stars}",
booktabs = TRUE,
align = "lrrrr",
threeparttable = TRUE,
title = "Logit coefficients for baseline specifications",
vcov = ~ canton_dpa,
notes = notes_baseline_models,
gof_map = gf_map) %>%
kable_styling(latex_options = "hold_position")
#| label: partial-effects-plot
#| fig-cap: "Marginal Effects of Max. Temperature on Presidential Approval"
plot_slopes(simple_model4,
variables = "max_temperature",
condition = "max_temperature") +
theme_minimal() +
labs(x = "Max. Temperature (\u00B0C)",
y = "Marginal Probability of Presidential Approval") +
scale_y_continuous(labels = scales::percent_format()) +
theme(panel.grid.major = element_line(linetype = "dashed", linewidth = 0.3),
panel.grid.minor = element_line(linetype = "dashed", linewidth = 0.3),
axis.text.x = element_text(color = "black"),
text = element_text(family = 'serif', color = "black"),
plot.background = element_rect(fill = "white", colour = "white"),
panel.border = element_rect(colour = "black", fill = NA, linewidth = 1, linetype = "solid"),
plot.caption = element_text(hjust = 0))
#| label: results-baseline-models
#| output: asis
# Define the coefficient names
coefficients_baseline_models <- c(
"min_temperature" = "Min. temperature (\u00B0C)",
"max_temperature" = "Max. temperature (\u00B0C)",
"avg_temperature" = "Avg. temperature (\u00B0C)",
"precipitation" = "Precipitation (mm)"
)
# Add notes as a list
notes_baseline_models <- list(
"Note: Baseline models explaining presidential approval through daily weather variables and canton and interview date fixed effects. Standard errors shown in parentheses are clustered by canton.",
"***p<0.01, **p<0.05, *p<0.1."
)
# Use modelsummary to create the table
modelsummary(simple_models,
coef_map = coefficients_baseline_models,
stars = stars,
output = "latex",
estimate = "{estimate}{stars}",
booktabs = TRUE,
align = "lrrrr",
threeparttable = TRUE,
title = "Logit coefficients for baseline specifications",
vcov = ~ canton_dpa,
notes = notes_baseline_models,
gof_map = gf_map) %>%
kable_styling(latex_options = "hold_position")
#| label: results-setup
#| include: false
# Source the models
source("scripts/r/empirical_analysis.R")
# Load other needed libraries
library(marginaleffects)
library(ggplot2)
# Define modelsummary arguments for tables
stars <- c("*" = 0.1,
"**" = 0.05,
"***" = 0.05)
# Do the goodness of fit mapping as a list mapping
gf_map <- list(
list("raw" = "nobs", "clean" = "N", "fmt" = 0),
list("raw" = "aic", "clean" = "AIC", "fmt" = 0),
list("raw" = "rmse", "clean" = "RMSE", "fmt" = 3),
list("raw" = "FE: canton_dpa", "clean" = "Canton fixed effects", "fmt" = 0),
list("raw" = "FE: interview_date", "clean" = "Interview date fixed effects", "fmt" = 0)
)
#| label: heterogeneity-table
#| output: asis
# Define the coefficient names
coef_names_heterogeneity <- c(
"min_temperature" = "Min. temp. (\u00B0C)",
"max_temperature" = "Max. temp. (\u00B0C)",
"region::Costa:min_temperature" = "Coastal \u00D7 Min. temp. (\u00B0C)",
"region::Oriente:min_temperature" = "Amazon \u00D7 Min. temp. (\u00B0C)",
"region::Costa:max_temperature" = "Coastal \u00D7 Max. temp. (\u00B0C)",
"region::Oriente:max_temperature" = "Amazon \u00D7 Max. temp. (\u00B0C)",
"country_econ_situationWorse:min_temperature" = "Worse country econ. \u00D7 Min. temp. (\u00B0C)",
"country_econ_situationWorse:max_temperature" = "Worse country econ. \u00D7 Max. temp. (\u00B0C)",
"personal_econ_situationWorse:min_temperature" = "Worse personal econ. \u00D7 Min. temp. (\u00B0C)",
"personal_econ_situationWorse:max_temperature" = "Worse personal econ. \u00D7 Max. temp. (\u00B0C)",
"ideology:min_temperature" = "Ideology score \u00D7 Min. temp. (\u00B0C)",
"ideology:max_temperature" = "Ideology score \u00D7 Max. temp. (\u00B0C)"
)
# Notes for the table
notes_heterogeneity_models <- list(
"Note: Models allowing for heterogeneous effects of temperature on presidential approval. Regional categories hold the Highlands region as the reference level. Standard errors shown in parentheses are clustered by canton.",
"***p<0.01, **p<0.05, *p<0.1."
)
# Use modelsummary to create the table
modelsummary(models_hetero,
gof_map = gf_map,
coef_map = coef_names_heterogeneity,
stars = stars,
estimate = "{estimate}{stars}",
booktabs = TRUE,
align = "lrrrr",
threeparttable = TRUE,
title = "Logit coefficients for models with interaction terms",
vcov = ~ canton_dpa,
notes = notes_heterogeneity_models,
output = "latex",
threeparttable = TRUE,
longtable = T) %>%
kable_styling(latex_options = c("hold_position", "repeat_header"))
#| label: appendix-setup
# Source models
source("scripts/r/empirical_analysis.R")
# Load other needed libraries
library(dplyr)
library(marginaleffects)
library(ggplot2)
library(kableExtra)
# Define modelsummary arguments for tables
stars <- c("*" = 0.1,
"**" = 0.05,
"***" = 0.05)
# Do the goodness of fit mapping as a list mapping
gf_map <- list(
list("raw" = "nobs", "clean" = "N", "fmt" = 0),
list("raw" = "aic", "clean" = "AIC", "fmt" = 0),
list("raw" = "rmse", "clean" = "RMSE", "fmt" = 3),
list("raw" = "FE: canton_dpa", "clean" = "Canton fixed effects", "fmt" = 0),
list("raw" = "FE: interview_date", "clean" = "Interview date fixed effects", "fmt" = 0)
)
coefficients_baseline_models <- c(
"min_temperature" = "Min. temperature (\u00B0C)",
"max_temperature" = "Max. temperature (\u00B0C)",
"avg_temperature" = "Avg. temperature (\u00B0C)",
"precipitation" = "Precipitation (mm)"
)
#| child: /scripts/r/coefficient_names.R
knitr::read_chunk("/scripts/r/coefficient_names.R")
knitr::read_chunk("scripts/r/coefficient_names.R")
knitr::read_chunk("scripts/r/coefficient_names.R")
#| label: apes-table-1
#| file: /scripts/coefficient_names.R
#| output: asis
# Apply the avg_slopes function to the simple_models list
notes_baseline_models_apes <- list(
"Note: Average partial effects for baseline models explaining presidential approval through daily weather variables and canton and interview date fixed effects. Standard errors shown in parentheses are clustered by canton.",
"***p<0.01, **p<0.05, *p<0.1.")
apes_baseline <- lapply(simple_models, avg_slopes, type = "response")
modelsummary(apes_baseline,
output = "latex",
coef_map = coefficients_baseline_models,
stars = stars,
align = "lrrrr",
estimate = "{estimate}{stars}",
title = "Average partial effects for baseline models in Table 3",
threeparttable = TRUE,
notes = notes_baseline_models_apes,
gof_map = gf_map) %>%
kable_styling(latex_options = c("hold_position"))
library(rbbt)
remotes::install_github("paleolimbot/rbbt")
library(rbbt)
library(rbbt)
remotes::install_github("paleolimbot/rbbt")
remotes::install_github("paleolimbot/rbbt", force = T)
library(rbbt)
bbt_update_bib("some_file.Rmd")
bbt_update_bib()
?rbbt
??rbbt
?bb_bib
?rbbt_bib
?bbt_bib
bbt_bib(
keys = c("keyresponsibleelectorateRationality1966")
)
bbt_bib(
keys = @keyresponsibleelectorateRationality1966
bbt_bib(
keys = keyresponsibleelectorateRationality1966
)
bbt_bib(
keys = c(keyresponsibleelectorateRationality1966)
)
bbt_bib(
keys = responsibleelectorateRationality1966
)
bbt_bib(
keys = responsibleElectorate
)
# R Script: AmericasBarometer Data Cleaning
# POL837 Term Research Paper
# Simon Fraser University
# Daniel Sanchez
# Spring 2024
# This script joins the AmericasBarometer data with the daily weather data from the National Oceanic and Atmospheric Administration (NOAA) for Ecuador.
# Other preparation done accordingly.
# Preliminaries -----------------------------------------------------------
# Load libraries
library(dplyr)
library(ggplot2)
library(haven)
library(readr)
library(lubridate)
library(stringr)
library(fuzzyjoin)
library(forcats)
# Load AmericasBarometer (AB) data
# Merged Ecuador file (2004-2023)
ecu_ab_raw <- read_sav("data/americas_barometer/ECU_merge_2004-2023_LAPOP_AmericasBarometer_v1.0_w.sav")
# 2010 file for Ecuador
ecu_ab_2010_raw <- read_sav("data/americas_barometer/1707311029Ecuador_LAPOP_AmericasBarometer 2010 data set  approved v3.sav")
# 2021 file for Ecuador
ecu_ab_2021_raw <- read_dta("data/americas_barometer/ECU_2021_LAPOP_AmericasBarometer_v1.2_w.dta")
# Weather data
min_temperature_df <- read_csv("data/weather/min_temperature.csv",
show_col_types = FALSE) %>%
select(canton_id,
date,
min_temperature = value)
max_temperature_df <- read_csv("data/weather/max_temperature.csv",
show_col_types = FALSE) %>%
select(canton_id,
date,
max_temperature = value)
precipitation_df <- read_csv("data/weather/precipitation.csv",
show_col_types = FALSE) %>%
select(canton_id,
date,
precipitation = value)
# Cantons data, clean to match with AB canton names
ecuador_cantons_df <-
read_csv("data/other/ecuador_cantons.csv",
show_col_types = FALSE) %>%
mutate(canton_name_clean = str_to_lower(canton_name) %>%
str_replace_all("cantón","") %>%
str_remove("^[346]\\s*") %>%
str_trim(),
province_name_clean = str_to_lower(prov) %>%
str_remove("^[346]\\s*") %>%
str_trim()) %>%
arrange(canton_name_clean, province_name_clean)
# AB Data Cleaning (full file 2004-2023) ------------------------------------------------------------
# Apply or remove the labels for relevant variables
# Join the 2010 file with the main file to get 2010 canton names
# Create clean cantons names and ids to join to weather data later
# Also do the provinces, will need them for doing a canton-province join due to cantons having the same name in different provinces
ecu_ab <-
ecu_ab_raw %>%
left_join(ecu_ab_2010_raw %>% select(idnum, municipio2010 = municipio), by = "idnum") %>%
left_join(ecu_ab_2021_raw %>% select(uniq_id, q1tb), by = c("idnum" = "uniq_id")) %>%
mutate(year = zap_labels(year),
wave = zap_labels(wave),
pais = as_factor(pais),
region = case_match(estratopri, 901 ~ "Costa", 902 ~ "Sierra", 903 ~ "Oriente") %>% forcats::as_factor() %>% fct_relevel("Sierra"),
fecha = if_else(fecha == "NR", NA_character_, fecha),
canton_id_ab = case_when(
year %in% 2004:2008 ~ as.character(canton),
year == 2010 ~ as.character(municipio10),
year %in% c(2012,2014, 2016, 2019, 2023) ~ as.character(municipio),
year == 2021 ~ as.character(municipio1t)),
canton_name_ab = case_when(
year %in% 2004:2008 ~ as_factor(canton),
year == 2010 ~ as_factor(municipio2010),
year %in% c(2012,2014, 2016, 2019, 2023) ~ as_factor(municipio),
year == 2021 ~ as_factor(municipio1t)),
canton_name_clean = str_to_lower(canton_name_ab) %>%
str_replace_all("cantón","") %>%
str_replace_all("distrito metropolitano de","") %>%
str_remove("^[346]\\s*") %>%
str_trim(),
province_id_ab = if_else(year == 2021, as.character(prov1t), as.character(prov)),
province_name_ab = if_else(year == 2021, as_factor(prov1t), as_factor(prov)),
province_name_clean = str_to_lower(province_name_ab) %>%
str_trim(),
sex = case_when(
year == 2021 & q1tb == 1 ~ "Male",
year == 2021 & q1tb == 2 ~ "Female",
year == 2021 & q1tb == 3 ~ NA_character_,
year != 2021 & q1 == 1 ~ "Male",
year != 2021 & q1 == 2 ~ "Female") %>% forcats::as_factor() %>% fct_relevel("Male"),
age = q2 %>% zap_missing() %>% zap_labels(),
q11 = zap_labels(q11) %>% zap_missing(),
q11n = zap_labels(q11n) %>% zap_missing(),
civil_status = case_when(
year %in% c(2008, 2010) & q11 == 1 ~ "Single",
year %in% c(2008, 2010) & q11 %in% c(2,3) ~ "Married/Common Law",
year %in% c(2008, 2010) & q11 %in% c(3,4,5) ~ "Divorced/Separated/Widowed",
year %in% c(2012, 2014, 2016, 2019, 2023) & q11n == 1 ~ "Single",
year %in% c(2012, 2014, 2016, 2019, 2023) & q11n %in% c(2,3) ~ "Married/Common Law",
year %in% c(2012, 2014, 2016, 2019, 2023) & q11n %in% c(3,4,5) ~ "Divorced/Separated/Widowed",
TRUE ~ NA_character_) %>% forcats::as_factor() %>% fct_relevel("Single"),
urban_rural = case_when(
year == 2021 & ur1new %in% c(1,2) ~ "Urban",
year == 2021 & ur1new %in% c(3,4) ~ "Rural",
year != 2021 & ur == 1 ~ "Urban",
year != 2021 & ur == 2 ~ "Rural"
) %>% forcats::as_factor() %>% fct_relevel("Urban"),
highest_education_2021 = case_when(
ed == 0 ~ "None",
ed %>% between(1, 7) ~ "Primary",
ed %>% between(8, 13) ~ "Secondary",
ed >= 14 ~ "Superior"),
education = case_when(
year == 2021 & edr == 0 ~ "None",
year == 2021 & edr == 1 ~ "Primary",
year == 2021 & edr == 2 ~ "Secondary",
year == 2021 & edr == 3 ~ "Superior",
year != 2021 ~ highest_education_2021),
pres_approval_rating = case_match(m1,
c(1,2) ~ "Approves",
3 ~ "Indifferent",
c(4,5) ~ "Disapproves"),
approves_president =  if_else(pres_approval_rating == "Approves", 1, 0),
disapproves_president = if_else(pres_approval_rating == "Disapproves", "Disapproves", "Indifferent or Approves") %>% forcats::as_factor() %>% fct_relevel("Indifferent or Approves"),
ideology = l1 %>% zap_missing %>% zap_labels(),
labour_market = case_match(ocup4a, c(1,2) ~ "Employed", 3 ~ "Unemployed", c(4:7) ~ "Not in Labour Force"),
country_econ_situation = if_else(soct2 > 2, "Worse", "Better or Same") %>% forcats::as_factor() %>% fct_relevel("Better or Same"),
personal_econ_situation = if_else(idio2 > 2, "Worse", "Better or Same") %>% forcats::as_factor() %>% fct_relevel("Better or Same"),
corruption_perception = if_else(exc7 >= 2, "Corrupt", "Not Corrupt") %>% forcats::as_factor() %>% fct_relevel("Not Corrupt"),
corruption_tolerance = if_else(exc18 == 1, "Tolerant", "Not Tolerant") %>% forcats::as_factor() %>% fct_relevel("Not Tolerant"),
democracy_support = if_else(ing4 >= 5, "Supports", "Does Not Support") %>% forcats::as_factor() %>% fct_relevel("Does Not Support"),
political_pride = zap_labels(b4),
confidence_justice = zap_labels(b10a),
confidence_police = zap_labels(b18),
confidence_local_gov = zap_labels(b32),
ethnicity = as_factor(etid),
q3 = zap_labels(q3) %>% zap_missing(),
q3c = zap_labels(q3c) %>% zap_missing(),
q3cn = zap_labels(q3cn) %>% zap_missing(),
non_religious = case_when(
year == 2008 & q3 == 4 ~ "Non-religious/Agnostic",
year == 2008 & q3 %in% c(1,2,3,5,6) ~ "Religious",
year %in% 2010:2016 & q3c %in% c(4,11) ~ "Non-religious/Agnostic",
year %in% 2010:2016 & q3c %in% c(1:3, 5:10, 12,77) ~ "Religious",
year %in% c(2019,2023) & q3cn %in% c(4,11) ~ "Non-religious/Agnostic",
year %in% c(2019,2023) & q3cn %in% c(1:3, 5:10, 12,77) ~ "Religious",
TRUE ~ NA_character_) %>% forcats::as_factor() %>% fct_relevel("Non-religious/Agnostic"),
vb3_08 = zap_labels(vb3_08) %>% zap_missing(),
vb3_10 = zap_labels(vb3_10) %>% zap_missing(),
vb3_12 = zap_labels(vb3_12) %>% zap_missing(),
vb3n_14 = zap_labels(vb3n_14) %>% zap_missing(),
vb3n_16 = zap_labels(vb3n_16) %>% zap_missing(),
vb3n_18 = zap_labels(vb3n_18) %>% zap_missing(),
vb3n = zap_labels(vb3n) %>% zap_missing(),
vb20 = zap_labels(vb20) %>% zap_missing(),
voted_for_incumbent = case_when(
year == 2008 & vb3_08 == 901 ~ "Yes",
year == 2008 & vb3_08 != 901 ~ "No",
year == 2010 & vb3_10 == 901 ~ "Yes",
year == 2010 & vb3_10 != 901 ~ "No",
year == 2012 & vb3_12 == 901 ~ "Yes",
year == 2012 & vb3_12 != 901 ~ "No",
year == 2014 & vb3_12 == 901 ~ "Yes",
year == 2014 & vb3_12 != 901 ~ "No",
year == 2016 & vb3n_16 == 901 ~ "Yes",
year == 2016 & vb3n_16 != 901 ~ "No",
year == 2019 & vb3n_18 == 901 ~ "Yes",
year == 2019 & vb3n_18 != 901 ~ "No",
year == 2023 & vb3n == 901 ~ "Yes",
year == 2023 & vb3n != 901 ~ "No") %>% forcats::as_factor() %>% fct_relevel("No"),
prospective_incumbent_vote = if_else(vb20 == 2, "Yes", "No") %>% forcats::as_factor() %>% fct_relevel("No"),
external_efficacy = zap_labels(eff1) %>% zap_missing(), # Higher means agree
internal_efficacy = zap_labels(eff2) %>% zap_missing() # Higher means agree
)
#| label: results-setup
#| include: false
# Source the models
source("scripts/r/empirical_analysis.R")
#| label: results-setup
#| include: false
# Source the models
source("scripts/r/empirical_analysis.R")
# Load other needed libraries
library(dplyr)
library(marginaleffects)
library(ggplot2)
library(kableExtra)
# Define modelsummary arguments for tables
stars <- c("*" = 0.1,
"**" = 0.05,
"***" = 0.05)
# Do the goodness of fit mapping as a list mapping
gf_map <- list(
list("raw" = "nobs", "clean" = "N", "fmt" = 0),
list("raw" = "aic", "clean" = "AIC", "fmt" = 0),
list("raw" = "rmse", "clean" = "RMSE", "fmt" = 3),
list("raw" = "FE: canton_dpa", "clean" = "Canton fixed effects", "fmt" = 0),
list("raw" = "FE: interview_date", "clean" = "Interview date fixed effects", "fmt" = 0)
)
coefficients_baseline_models <- c(
coefficients_baseline_models <- c(
coefficients_baseline_models <- c(
coefficients_baseline_models <- c(
coefficients_baseline_models <- c(
coefficients_baseline_models <- c(
coefficients_baseline_models <- c(
coefficients_baseline_models <- c(
coefficients_baseline_models <- c(
coefficients_baseline_models <- c(
"min_temperature" = "Min. temperature (\u00B0C)",
"max_temperature" = "Max. temperature (\u00B0C)",
"avg_temperature" = "Avg. temperature (\u00B0C)")
#| label: results-baseline-models
#| output: asis
# Define the coefficient names
coefficients_baseline_models <- c(
"min_temperature" = "Min. temperature (\u00B0C)",
"max_temperature" = "Max. temperature (\u00B0C)",
"avg_temperature" = "Avg. temperature (\u00B0C)")
# Add notes as a list
notes_baseline_models <- list(
"Note: Baseline models explaining presidential approval through daily weather variables and canton and interview date fixed effects. Standard errors shown in parentheses are clustered by canton.",
"***p<0.01, **p<0.05, *p<0.1."
)
# Use modelsummary to create the table
modelsummary(simple_models,
coef_map = coefficients_baseline_models,
stars = stars,
output = "latex",
estimate = "{estimate}{stars}",
booktabs = TRUE,
align = "lrrrr",
threeparttable = TRUE,
title = "Logit coefficients for baseline specifications",
vcov = ~ canton_dpa,
notes = notes_baseline_models,
gof_map = gf_map) %>%
kable_styling(latex_options = "hold_position")
